package org.altmir;

import lombok.RequiredArgsConstructor;
import org.altmir.Service.AdminService;
import org.altmir.Service.UserService;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;

public class PaintballBot extends TelegramLongPollingBot {
    private final UserService userService;
    private final AdminService adminService;
    private final String botUsername;
    private final String botToken;

    private final Map<String, String> adminCommands = new HashMap<>();
    private final Map<Long, Long> pendingAdminActions = new HashMap<>();

    public PaintballBot(String botUsername, String botToken) {
        this.botUsername = botUsername;
        this.botToken = botToken;
        this.userService = new UserService();
        this.adminService = new AdminService();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        adminCommands.put("/admin_add", "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        adminCommands.put("/admin_remove", "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        adminCommands.put("/admin_list", "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤");
        adminCommands.put("/bonus_add", "–î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        adminCommands.put("/bonus_remove", "–£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        adminCommands.put("/stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        adminCommands.put("/admin_help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        User telegramUser = message.getFrom();
        Long userId = telegramUser.getId();
        String username = telegramUser.getUserName();

        System.out.println("User ID: " + userId + ", Username: @" + username + ", Chat ID: " + chatId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        boolean isAdmin = adminService.isAdmin(userId);

        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if (isAdmin) {
            if ("/start".equals(text) || "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
                showAdminPanel(chatId, userId);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (text.startsWith("/admin_") || text.startsWith("/bonus_") || text.startsWith("/stats") || "/admin_help".equals(text)) {
                handleAdminCommand(chatId, text, userId, message);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            if (isAdmin && handleAdminPanelButtons(chatId, text, userId)) {
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (pendingAdminActions.containsKey(chatId)) {
                handlePendingAdminAction(chatId, text, userId);
                return;
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userService.getOrCreateUser(chatId, username);

        if (!userService.hasAcceptedTerms(chatId)) {
            handleTerms(chatId, text, isAdmin);
            return;
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        switch (text) {
            case "/start":
                sendWelcomeMessage(chatId, isAdmin);
                break;
            case "üéÆ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É":
                handleGameRequest(chatId, username);
                break;
            case "‚≠ê –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                sendMessage(chatId, userService.getUserStats(chatId));
                break;
            case "üéÅ –ë–æ–Ω—É—Å—ã":
                handleBonusInfo(chatId);
                break;
        }
    }

    private boolean handleAdminPanelButtons(Long chatId, String text, Long adminId) {
        switch (text) {
            case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                sendMessage(chatId, "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n`/stats [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
                return true;
            case "üéÆ –ó–∞–ø—Ä–æ—Å—ã –∏–≥—Ä":
                showPendingGameRequests(chatId);
                return true;
            case "‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏":
                showBonusManagementPanel(chatId);
                return true;
            case "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏":
                showAdminManagementPanel(chatId);
                return true;
            case "üìã –°–ø—Ä–∞–≤–∫–∞":
                showAdminHelp(chatId);
                return true;
        }
        return false;
    }

    private void showAdminPanel(Long chatId, Long adminId) {
        String welcomeMessage = "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n" +
                "ID: " + adminId + "\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(welcomeMessage);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createAdminKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup createAdminKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setSelective(true);

        List<KeyboardRow> rows = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        row1.add("üéÆ –ó–∞–ø—Ä–æ—Å—ã –∏–≥—Ä");

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥
        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏");
        row2.add("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏");

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥
        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìã –°–ø—Ä–∞–≤–∫–∞");
        row3.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private void handleTerms(Long chatId, String text, boolean isAdmin) {
        if ("/start".equals(text)) {
            sendTermsMessage(chatId, isAdmin);
        } else if ("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ".equals(text)) {
            userService.acceptTerms(chatId);
            String message = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n\n";
            if (isAdmin) {
                message += "–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!";
                sendMessage(chatId, message);
                showAdminPanel(chatId, chatId);
            } else {
                message += "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!";
                sendMessage(chatId, message);
                sendWelcomeMessage(chatId, false);
            }
        } else {
            sendTermsMessage(chatId, isAdmin);
        }
    }

    private void sendTermsMessage(Long chatId, boolean isAdmin) {
        String terms = "üìù *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*\n\n" +
                "1. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É—á–µ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–µ–π–Ω—Ç–±–æ–ª—å–Ω–æ–≥–æ –∫–ª—É–±–∞\n" +
                "2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (ID —á–∞—Ç–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n" +
                "3. –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n" +
                "4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n\n" +
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(terms);
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ");
        rows.add(row);

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleAdminCommand(Long chatId, String command, Long adminId, Message message) {
        if ("/admin_help".equals(command)) {
            showAdminHelp(chatId);
            return;
        }

        if ("/admin_list".equals(command)) {
            showAdminList(chatId);
            return;
        }

        if (command.startsWith("/stats ")) {
            handleStatsCommand(chatId, command);
            return;
        }

        if (command.startsWith("/admin_add ")) {
            handleAdminAddCommand(chatId, command, adminId);
            return;
        }

        if (command.startsWith("/admin_remove ")) {
            handleAdminRemoveCommand(chatId, command);
            return;
        }

        if (command.startsWith("/bonus_add ")) {
            handleBonusAddCommand(chatId, command, adminId);
            return;
        }

        if (command.startsWith("/bonus_remove ")) {
            handleBonusRemoveCommand(chatId, command, adminId);
            return;
        }

        if ("/admin_add".equals(command)) {
            sendMessage(chatId, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n`/admin_add [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
            pendingAdminActions.put(chatId, 1L);
            return;
        }

        if ("/admin_remove".equals(command)) {
            sendMessage(chatId, "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n`/admin_remove [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
            pendingAdminActions.put(chatId, 2L);
            return;
        }

        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/admin_help` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
    }

    private void showAdminManagementPanel(Long chatId) {
        String message = "üëë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n" +
                "‚Ä¢ `/admin_list` - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n" +
                "‚Ä¢ `/admin_add [ID]` - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n" +
                "‚Ä¢ `/admin_remove [ID]` - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
                "üìã *–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n";

        List<String> admins = adminService.getAdminList();
        for (String admin : admins) {
            message += "‚Ä¢ " + admin + "\n";
        }

        sendMessage(chatId, message);
    }

    private void showBonusManagementPanel(Long chatId) {
        String message = "‚≠ê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏*\n\n" +
                "‚Ä¢ `/bonus_add [ID] [–∫–æ–ª-–≤–æ]` - –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å—ã\n" +
                "‚Ä¢ `/bonus_remove [ID] [–∫–æ–ª-–≤–æ]` - –°–Ω—è—Ç—å –±–æ–Ω—É—Å—ã\n\n" +
                "–ü—Ä–∏–º–µ—Ä: `/bonus_add 123456789 50` - –¥–æ–±–∞–≤–∏—Ç—å 50 –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 123456789";

        sendMessage(chatId, message);
    }

    private void showPendingGameRequests(Long chatId) {
        String message = "üéÆ *–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä*\n\n" +
                "–ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.";

        sendMessage(chatId, message);
    }

    private void showAdminHelp(Long chatId) {
        StringBuilder helpMessage = new StringBuilder("üëë *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n");

        for (Map.Entry<String, String> entry : adminCommands.entrySet()) {
            helpMessage.append("‚Ä¢ ").append(entry.getKey())
                    .append(" - ").append(entry.getValue()).append("\n");
        }

        helpMessage.append("\nüìã *–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n");
        helpMessage.append("‚Ä¢ `/admin_add 123456789` - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n");
        helpMessage.append("‚Ä¢ `/admin_remove 123456789` - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n");
        helpMessage.append("‚Ä¢ `/bonus_add 987654321 50` - –¥–æ–±–∞–≤–∏—Ç—å 50 –±–æ–Ω—É—Å–æ–≤\n");
        helpMessage.append("‚Ä¢ `/bonus_remove 987654321 25` - —Å–Ω—è—Ç—å 25 –±–æ–Ω—É—Å–æ–≤\n");
        helpMessage.append("‚Ä¢ `/stats 987654321` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        sendMessage(chatId, helpMessage.toString());
    }

    private void handleStatsCommand(Long chatId, String command) {
        if (command.startsWith("/stats ")) {
            String[] parts = command.split(" ");
            if (parts.length == 2) {
                try {
                    Long userChatId = Long.parseLong(parts[1]);
                    String stats = userService.getUserStats(userChatId);
                    if (stats.contains("–Ω–µ –Ω–∞–π–¥–µ–Ω")) {
                        sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userChatId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    } else {
                        sendMessage(chatId, "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userChatId + ":*\n\n" + stats);
                    }
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/stats [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
                }
            } else {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/stats [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
            }
        } else {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/stats [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
        }
    }

    private void handleAdminAddCommand(Long chatId, String command, Long adminId) {
        String[] parts = command.split(" ");
        if (parts.length == 2) {
            try {
                Long newAdminId = Long.parseLong(parts[1]);
                String username = "username";
                adminService.addAdmin(newAdminId, username, adminId);
                sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/admin_add [—á–∏—Å–ª–æ–≤–æ–π ID]`");
            }
        } else {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/admin_add [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
        }
    }

    private void handleAdminRemoveCommand(Long chatId, String command) {
        String[] parts = command.split(" ");
        if (parts.length == 2) {
            try {
                Long removeAdminId = Long.parseLong(parts[1]);
                adminService.removeAdmin(removeAdminId);
                sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/admin_remove [—á–∏—Å–ª–æ–≤–æ–π ID]`");
            }
        } else {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/admin_remove [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`");
        }
    }

    private void handleBonusAddCommand(Long chatId, String command, Long adminId) {
        String[] parts = command.split(" ");
        if (parts.length == 3) {
            try {
                Long userChatId = Long.parseLong(parts[1]);
                int points = Integer.parseInt(parts[2]);
                adminService.addBonusPoints(userChatId, points, adminId);
                sendMessage(chatId, "‚úÖ –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!");
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/bonus_add [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]`");
            }
        } else {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/bonus_add [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]`");
        }
    }

    private void handleBonusRemoveCommand(Long chatId, String command, Long adminId) {
        String[] parts = command.split(" ");
        if (parts.length == 3) {
            try {
                Long userChatId = Long.parseLong(parts[1]);
                int points = Integer.parseInt(parts[2]);
                adminService.removeBonusPoints(userChatId, points, adminId);
                sendMessage(chatId, "‚úÖ –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/bonus_remove [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]`");
            }
        } else {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/bonus_remove [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]`");
        }
    }

    private void handlePendingAdminAction(Long chatId, String text, Long adminId) {
        Long actionType = pendingAdminActions.get(chatId);

        try {
            Long targetId = Long.parseLong(text);

            if (actionType == 1L) { // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                adminService.addAdmin(targetId, "username", adminId);
                sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
            } else if (actionType == 2L) { // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                adminService.removeAdmin(targetId);
                sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
            }

            pendingAdminActions.remove(chatId);

        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }
    }

    private void showAdminList(Long chatId) {
        List<String> admins = adminService.getAdminList();
        StringBuilder message = new StringBuilder("üëë *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n");

        for (String admin : admins) {
            message.append("‚Ä¢ ").append(admin).append("\n");
        }

        sendMessage(chatId, message.toString());
    }

    private void sendWelcomeMessage(Long chatId, boolean isAdmin) {
        String welcomeText;
        ReplyKeyboardMarkup keyboard;

        if (isAdmin) {
            welcomeText = "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
            keyboard = createAdminKeyboard();
        } else {
            welcomeText = "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Paintball Club Bot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
            keyboard = createMainKeyboard();
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(welcomeText);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üéÆ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É");
        row1.add("‚≠ê –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üéÅ –ë–æ–Ω—É—Å—ã");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private void handleGameRequest(Long chatId, String username) {
        if (userService.hasPendingRequest(chatId)) {
            sendMessage(chatId, "‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã. " +
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.");
            return;
        }

        try {
            Long requestId = adminService.createGameRequest(chatId, username);

            if (requestId != null) {
                userService.setPendingRequestStatus(chatId, true);

                sendMessage(chatId, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. " +
                        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n" +
                        "üìã –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ.");

                notifyAdminsAboutGameRequest(requestId, chatId, username);
            } else {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ handleGameRequest: " + e.getMessage());
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void notifyAdminsAboutGameRequest(Long requestId, Long userChatId, String username) {
        List<Long> adminIds = adminService.getAllAdminIds();

        String message = String.format(
                "üéÆ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã\n\n" +
                        "ID –∑–∞–ø—Ä–æ—Å–∞: %d\n" +
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @%s\n" +
                        "Chat ID: %d\n" +
                        "–í—Ä–µ–º—è: %s\n\n" +
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã?",
                requestId, username, userChatId,
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );

        for (Long adminId : adminIds) {
            SendMessage adminMsg = new SendMessage();
            adminMsg.setChatId(adminId.toString());
            adminMsg.setText(message);
            adminMsg.setReplyMarkup(createAdminApproveKeyboard(requestId));

            try {
                execute(adminMsg);
            } catch (TelegramApiException e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É " + adminId + ": " + e.getMessage());
            }
        }
    }

    private InlineKeyboardMarkup createAdminApproveKeyboard(Long requestId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton approveBtn = new InlineKeyboardButton();
        approveBtn.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        approveBtn.setCallbackData("approve_" + requestId);
        row1.add(approveBtn);

        InlineKeyboardButton rejectBtn = new InlineKeyboardButton();
        rejectBtn.setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
        rejectBtn.setCallbackData("reject_" + requestId);
        row1.add(rejectBtn);

        rows.add(row1);
        markup.setKeyboard(rows);
        return markup;
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long adminId = callbackQuery.getFrom().getId();
        String callbackId = callbackQuery.getId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        Long chatId = callbackQuery.getMessage().getChatId();

        try {
            if (data.startsWith("approve_")) {
                Long requestId = Long.parseLong(data.split("_")[1]);
                adminService.approveGameRequest(requestId, adminId);

                Long userChatId = adminService.getUserChatIdFromRequest(requestId);
                if (userChatId != null) {
                    sendMessage(userChatId, "‚úÖ –í–∞—à–∞ –∏–≥—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! +10 –±–æ–Ω—É—Å–æ–≤");
                    sendMessage(userChatId, userService.getUserStats(userChatId));
                }

                editAdminMessage(chatId, messageId, "‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω", requestId);

                answerCallbackQuery(callbackId, "‚úÖ –ò–≥—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");

            } else if (data.startsWith("reject_")) {
                Long requestId = Long.parseLong(data.split("_")[1]);
                adminService.rejectGameRequest(requestId, adminId);

                Long userChatId = adminService.getUserChatIdFromRequest(requestId);
                if (userChatId != null) {
                    sendMessage(userChatId, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
                }

                editAdminMessage(chatId, messageId, "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω", requestId);

                answerCallbackQuery(callbackId, "‚ùå –ò–≥—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: " + e.getMessage());
            answerCallbackQuery(callbackId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }

    private void editAdminMessage(Long chatId, Integer messageId, String newText, Long requestId) {
        try {
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId.toString());
            editMessage.setMessageId(messageId);

            String originalText = getOriginalMessageText(requestId);
            editMessage.setText(newText + "\n\n" + originalText);

            editMessage.setReplyMarkup(null);

            execute(editMessage);

        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private String getOriginalMessageText(Long requestId) {
        return "ID –∑–∞–ø—Ä–æ—Å–∞: " + requestId + "\n–í—Ä–µ–º—è: " +
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
    }

    private void answerCallbackQuery(String callbackId, String text) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(callbackId);
        answer.setText(text);

        try {
            execute(answer);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleBonusInfo(Long chatId) {
        int bonusPoints = userService.getBonusPoints(chatId);
        int freeGames = bonusPoints / 10;

        String message = String.format(
                "üéÅ *–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n" +
                        "‚≠ê –í–∞—à–∏ –±–æ–Ω—É—Å—ã: %d\n" +
                        "üéÆ –î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä: %d\n\n" +
                        "üíé *–ü—Ä–∞–≤–∏–ª–∞:*\n" +
                        "‚Ä¢ 1 –∏–≥—Ä–∞ = 10 –±–æ–Ω—É—Å–æ–≤\n" +
                        "‚Ä¢ 100 –±–æ–Ω—É—Å–æ–≤ = 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞\n" +
                        "‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç",
                bonusPoints, freeGames
        );

        sendMessage(chatId, message);
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}