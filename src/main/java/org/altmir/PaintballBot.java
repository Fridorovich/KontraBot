package org.altmir;

import lombok.RequiredArgsConstructor;
import org.altmir.Service.AdminService;
import org.altmir.Service.UserService;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RequiredArgsConstructor
public class PaintballBot extends TelegramLongPollingBot {
    private final UserService userService;
    private final AdminService adminService;
    private final String botUsername;
    private final String botToken;

    private final Map<String, String> adminCommands = new HashMap<>();
    private final Map<Long, Long> pendingAdminActions = new HashMap<>();

    public PaintballBot(String botUsername, String botToken) {
        this.botUsername = botUsername;
        this.botToken = botToken;
        this.userService = new UserService();
        this.adminService = new AdminService();

        adminCommands.put("/admin_add", "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        adminCommands.put("/admin_remove", "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        adminCommands.put("/admin_list", "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤");
        adminCommands.put("/bonus_add", "–î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        adminCommands.put("/bonus_remove", "–£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        User telegramUser = message.getFrom();
        Long userId = telegramUser.getId();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        boolean isAdmin = adminService.isAdmin(userId);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (isAdmin && text.startsWith("/admin_")) {
            handleAdminCommand(chatId, text, userId, message);
            return;
        }

        if (isAdmin && text.startsWith("/bonus_")) {
            handleBonusCommand(chatId, text, userId, message);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userService.getOrCreateUser(chatId, telegramUser.getUserName());

        if (!userService.hasAcceptedTerms(chatId)) {
            handleTerms(chatId, text);
            return;
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        switch (text) {
            case "/start":
                sendWelcomeMessage(chatId);
                break;
            case "üéÆ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É":
                handleGameRequest(chatId, telegramUser.getUserName());
                break;
            case "‚≠ê –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                sendMessage(chatId, userService.getUserStats(chatId));
                break;
            case "üéÅ –ë–æ–Ω—É—Å—ã":
                handleBonusInfo(chatId);
                break;
            default:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if (pendingAdminActions.containsKey(chatId)) {
                    handlePendingAdminAction(chatId, text, userId);
                }
                break;
        }
    }

    private void handleTerms(Long chatId, String text) {
        if ("/start".equals(text)) {
            sendTermsMessage(chatId);
        } else if ("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ".equals(text)) {
            userService.acceptTerms(chatId);
            sendMessage(chatId, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!");
            sendWelcomeMessage(chatId);
        } else {
            sendTermsMessage(chatId);
        }
    }

    private void handleGameRequest(Long chatId, String username) {
        Long requestId = adminService.createGameRequest(chatId, username);

        if (requestId != null) {
            sendMessage(chatId, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            notifyAdminsAboutGameRequest(requestId, chatId, username);
        } else {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void notifyAdminsAboutGameRequest(Long requestId, Long userChatId, String username) {
        List<Long> adminIds = adminService.getAllAdminIds();
        String message = String.format(
                "üéÆ *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã*\n\n" +
                        "ID –∑–∞–ø—Ä–æ—Å–∞: %d\n" +
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @%s\n" +
                        "Chat ID: %d\n" +
                        "–í—Ä–µ–º—è: %s\n\n" +
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã?",
                requestId, username, userChatId, LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );

        for (Long adminId : adminIds) {
            SendMessage adminMsg = new SendMessage();
            adminMsg.setChatId(adminId.toString());
            adminMsg.setText(message);
            adminMsg.setParseMode("Markdown");
            adminMsg.setReplyMarkup(createAdminApproveKeyboard(requestId));

            try {
                execute(adminMsg);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    private InlineKeyboardMarkup createAdminApproveKeyboard(Long requestId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton approveBtn = new InlineKeyboardButton();
        approveBtn.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        approveBtn.setCallbackData("approve_" + requestId);
        row1.add(approveBtn);

        InlineKeyboardButton rejectBtn = new InlineKeyboardButton();
        rejectBtn.setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
        rejectBtn.setCallbackData("reject_" + requestId);
        row1.add(rejectBtn);

        rows.add(row1);
        markup.setKeyboard(rows);
        return markup;
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long adminId = callbackQuery.getFrom().getId();
        String callbackId = callbackQuery.getId();

        if (data.startsWith("approve_")) {
            Long requestId = Long.parseLong(data.split("_")[1]);
            adminService.approveGameRequest(requestId, adminId);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Long userChatId = adminService.getUserChatIdFromRequest(requestId);
            if (userChatId != null) {
                sendMessage(userChatId, "‚úÖ –í–∞—à–∞ –∏–≥—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! +10 –±–æ–Ω—É—Å–æ–≤");
                sendMessage(userChatId, userService.getUserStats(userChatId));
            }

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            answerCallbackQuery(callbackId, "‚úÖ –ò–≥—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");

        } else if (data.startsWith("reject_")) {
            Long requestId = Long.parseLong(data.split("_")[1]);
            adminService.rejectGameRequest(requestId, adminId);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Long userChatId = adminService.getUserChatIdFromRequest(requestId);
            if (userChatId != null) {
                sendMessage(userChatId, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
            }

            answerCallbackQuery(callbackId, "‚ùå –ò–≥—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
        }
    }

    private void handleAdminCommand(Long chatId, String command, Long adminId, Message message) {
        switch (command) {
            case "/admin_list":
                showAdminList(chatId);
                break;
            case "/admin_add":
                sendMessage(chatId, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n/admin_add [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]");
                pendingAdminActions.put(chatId, 1L); // 1 = –æ–∂–∏–¥–∞–Ω–∏–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
                break;
            case "/admin_remove":
                sendMessage(chatId, "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n/admin_remove [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]");
                pendingAdminActions.put(chatId, 2L); // 2 = –æ–∂–∏–¥–∞–Ω–∏–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
                break;
            default:
                if (command.startsWith("/admin_add ")) {
                    String[] parts = command.split(" ");
                    if (parts.length == 2) {
                        try {
                            Long newAdminId = Long.parseLong(parts[1]);
                            adminService.addAdmin(newAdminId, "username", adminId);
                            sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
                        } catch (NumberFormatException e) {
                            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_add [—á–∏—Å–ª–æ–≤–æ–π ID]");
                        }
                    }
                } else if (command.startsWith("/admin_remove ")) {
                    String[] parts = command.split(" ");
                    if (parts.length == 2) {
                        try {
                            Long removeAdminId = Long.parseLong(parts[1]);
                            adminService.removeAdmin(removeAdminId);
                            sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
                        } catch (NumberFormatException e) {
                            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_remove [—á–∏—Å–ª–æ–≤–æ–π ID]");
                        }
                    }
                }
                break;
        }
    }

    private void handleBonusCommand(Long chatId, String command, Long adminId, Message message) {
        if (command.startsWith("/bonus_add ")) {
            String[] parts = command.split(" ");
            if (parts.length == 3) {
                try {
                    Long userChatId = Long.parseLong(parts[1]);
                    int points = Integer.parseInt(parts[2]);
                    adminService.addBonusPoints(userChatId, points, adminId);
                    sendMessage(chatId, "‚úÖ –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!");
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bonus_add [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]");
                }
            } else {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bonus_add [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]");
            }
        } else if (command.startsWith("/bonus_remove ")) {
            String[] parts = command.split(" ");
            if (parts.length == 3) {
                try {
                    Long userChatId = Long.parseLong(parts[1]);
                    int points = Integer.parseInt(parts[2]);
                    adminService.removeBonusPoints(userChatId, points, adminId);
                    sendMessage(chatId, "‚úÖ –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bonus_remove [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]");
                }
            } else {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bonus_remove [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤]");
            }
        }
    }

    private void handlePendingAdminAction(Long chatId, String text, Long adminId) {
        Long actionType = pendingAdminActions.get(chatId);

        try {
            Long targetId = Long.parseLong(text);

            if (actionType == 1L) { // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                adminService.addAdmin(targetId, "username", adminId);
                sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
            } else if (actionType == 2L) { // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                adminService.removeAdmin(targetId);
                sendMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
            }

            pendingAdminActions.remove(chatId);

        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }
    }

    private void showAdminList(Long chatId) {
        List<String> admins = adminService.getAdminList();
        StringBuilder message = new StringBuilder("üëë *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n");

        for (String admin : admins) {
            message.append("‚Ä¢ ").append(admin).append("\n");
        }

        sendMessage(chatId, message.toString());
    }

    private void answerCallbackQuery(String callbackId, String text) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(callbackId);
        answer.setText(text);

        try {
            execute(answer);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendTermsMessage(Long chatId) {
        String terms = "üìù *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*\n\n" +
                "1. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É—á–µ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–µ–π–Ω—Ç–±–æ–ª—å–Ω–æ–≥–æ –∫–ª—É–±–∞\n" +
                "2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (ID —á–∞—Ç–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n" +
                "3. –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n" +
                "4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n\n" +
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(terms);
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ");
        rows.add(row);

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Paintball Club Bot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üéÆ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É");
        row1.add("‚≠ê –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üéÅ –ë–æ–Ω—É—Å—ã");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private void handleBonusInfo(Long chatId) {
        int bonusPoints = userService.getBonusPoints(chatId);
        int freeGames = bonusPoints / 10;

        String message = String.format(
                "üéÅ *–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n" +
                        "‚≠ê –í–∞—à–∏ –±–æ–Ω—É—Å—ã: %d\n" +
                        "üéÆ –î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä: %d\n\n" +
                        "üíé *–ü—Ä–∞–≤–∏–ª–∞:*\n" +
                        "‚Ä¢ 1 –∏–≥—Ä–∞ = 10 –±–æ–Ω—É—Å–æ–≤\n" +
                        "‚Ä¢ 100 –±–æ–Ω—É—Å–æ–≤ = 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞\n" +
                        "‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç",
                bonusPoints, freeGames
        );

        sendMessage(chatId, message);
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}